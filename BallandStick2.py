from neuron import h, gui
from neuron.units import ms, mV
import matplotlib.pyplot as plt

h.load_file('stdrun.hoc')


class Cell:  # generic cell class
    def __init__(self, gid, x, y, z, theta):
        """initializes instance variables of a Cell object"""
        self._gid = gid
        self._setup_morphology()
        self.all = self.soma.wholetree()  # all objects connected to soma
        self._setup_biophysics()
        self.x = self.y = self.z = 0
        h.define_shape()
        self._rotate_z(theta)
        self._set_position(x, y, z)

    def __repr__(self):
        """represents the Cell as a string"""
        return f"{self.name}[{self._gid}]"

    def _set_position(self, x, y, z):
        """sets the position"""
        for sec in self.all:
            for i in range(sec.n3d()):
                sec.pt3dchange(i,
                               x - self.x + sec.x3d(i),
                               y - self.y + sec.y3d(i),
                               z - self.z + sec.z3d(i),
                               sec.diam3d(i))
        self.x, self.y, self.z = x, y, z

    def _rotate_z(self, theta):
        """Rotate the cell about the Z axis."""
        for sec in self.all:
            for i in range(sec.n3d()):
                x = sec.x3d(i)
                y = sec.y3d(i)
                c = h.cos(theta)
                s = h.sin(theta)
                xprime = x * c - y * s
                yprime = x * s + y * c
                sec.pt3dchange(i, xprime, yprime, sec.z3d(i), sec.diam3d(i))


class BallAndStick(Cell):
    name = "BallAndStick"

    # def __init__(self, gid):
    #     """initialzes ball and stick cell"""
    #     self.gid = gid  # id
    #     self._setup_morphology()
    #     self._setup_biophysics()
    def _setup_morphology(self):
        """initialzes cell morphology"""
        self.soma = h.Section(name='soma', cell=self)  # create soma and dendrite
        self.dend = h.Section(name='dend', cell=self)
        # self.all = [self.soma, self.dend]  (moved to cell class)
        self.dend.connect(
            self.soma)  # connect the two, Note that this is not equivalent to attaching the soma to the dend; instead it means that the dendrite begins where the soma ends.
        # We could explicitly specify the connection location via, e.g. self.dend.connect(self.soma(0.5)) which would mean the dendrite was attached to the center of the soma.
        self.soma.L = self.soma.diam = 12.6157  # microns
        self.dend.L = 200
        self.dend.diam = 1

    def _setup_biophysics(self):
        """initlizes cell biophysics"""
        for sec in self.all:
            sec.Ra = 100  # Axial resistance in Ohm * cm
            sec.cm = 1  # Membrane capacitance in micro Farads / cm^2
        self.soma.insert('hh')
        for seg in self.soma:  # here we loop over all segments in the soma, even though we only defined one segment.
            seg.hh.gnabar = 0.12  # Sodium conductance in S/cm2
            seg.hh.gkbar = 0.036  # Potassium conductance in S/cm2
            seg.hh.gl = 0.0003  # Leak conductance in S/cm2
            seg.hh.el = -54.3  # Reversal potential in mV
        # Insert passive current in the dendrite
        self.dend.insert('pas')
        for seg in self.dend:
            seg.pas.g = 0.001  # Passive conductance in S/cm2
            seg.pas.e = -65  # Leak reversal potential mV
    # def __repr__(self):
    #     return f'BallAndStick[{self.gid}]'


mycell = BallAndStick(0, 0, 0, 0, 0)


def create_n_BallAndStick(n, r):
    """create a circle of neurons, n = number of cells; r = radius of circle"""
    cells = []
    for i in range(n):
        theta = i * 2 * h.PI / n
        cells.append(BallAndStick(i, h.cos(theta) * r, h.sin(theta) * r, 0, theta))
    return cells


my_cells = create_n_BallAndStick(5, 50)
ps = h.PlotShape(True)
ps.show(0)
# input()

stim = h.NetStim()  # Make a new stimulator

# Attach it to a synapse in the middle of the dendrite of the first cell in the network. (Named 'syn_' to avoid
# being overwritten with the 'syn' var assigned later.)
syn_ = h.ExpSyn(my_cells[0].dend(0.5))

stim.number = 1  # number of stims
stim.start = 9  # NetStim object that generates one spike at time t=9

# this is an AMPA synapse
ncstim = h.NetCon(stim, syn_)  # stim = source, syn_ = tgt
ncstim.delay = 1 * ms  # NetCon adds 1 ms delay to deliver a synaptic event at time t=10
ncstim.weight[0] = 0.04  # NetCon weight is a vector

syn_.tau = 2 * ms  # decaying currents (such as that generated by the synapse syn_) have tau to specify how quickly the currents decay
print(f'Reversal potential = {syn_.e} mV')

# recording
recording_cell = my_cells[0]
soma_v = h.Vector().record(recording_cell.soma(0.5)._ref_v)
dend_v = h.Vector().record(recording_cell.dend(0.5)._ref_v)
t = h.Vector().record(h._ref_t)

# sim
h.finitialize(-65 * mV)
h.continuerun(25 * ms)

plt.plot(t, soma_v, label='soma(0.5)')
plt.plot(t, dend_v, label='dend(0.5)')
plt.legend()
plt.show()

syn_i = h.Vector().record(syn_._ref_i)  # record time series of synaptic current
h.finitialize(-65 * mV)
h.continuerun(25 * ms)

# plot
fig = plt.figure(figsize=(8, 4))
ax1 = fig.add_subplot(2, 1, 1)
soma_plot = ax1.plot(t, soma_v, color='black', label='soma(0.5)')
dend_plot = ax1.plot(t, dend_v, color='red', label='dend(0.5)')
rev_plot = ax1.plot([t[0], t[-1]], [syn_.e, syn_.e], label='syn reversal',
                    color='blue', linestyle=':')
ax1.legend()
ax1.set_ylabel('mV')
ax1.set_xticks([])  # Use ax2's tick labels

ax2 = fig.add_subplot(2, 1, 2)
syn_plot = ax2.plot(t, syn_i, color='blue', label='synaptic current')
ax2.legend()
ax2.set_ylabel(h.units('ExpSyn.i'))
ax2.set_xlabel('time (ms)')
plt.show()

# connect cell n with cell n+1 by creating a presynaptic spike detector to trigger a synaptic event on post side via a NetCon
syns = []
netcons = []
for source, target in zip(my_cells, my_cells[1:] + [my_cells[0]]):
    syn = h.ExpSyn(target.dend(0.5))  # create synapse on mid tgt dendrite
    nc = h.NetCon(source.soma(0.5)._ref_v, syn, sec=source.soma)
    nc.weight[0] = 0.05
    nc.delay = 5
    netcons.append(nc)
    syns.append(syn)

# run on first cell
h.finitialize(-65 * mV)
h.continuerun(100 * ms)
plt.plot(t, soma_v, label='soma(0.5)')
plt.plot(t, dend_v, label='dend(0.5)')
plt.legend()
plt.show()

# record spike times
spike_times = [h.Vector() for nc in netcons]
for nc, spike_times_vec in zip(netcons, spike_times):
    nc.record(spike_times_vec)

h.finitialize(-65 * mV)
h.continuerun(100 * ms)

for i, spike_times_vec in enumerate(spike_times):
    print(f'cell {i}: {list(spike_times_vec)}')

# plot raster plot
plt.figure()

for i, spike_times_vec in enumerate(spike_times):
    plt.vlines(spike_times_vec, i + 0.5, i + 1.5)
plt.show()
